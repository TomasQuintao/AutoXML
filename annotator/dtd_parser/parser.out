Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ATTDECL
    COMMENT
    ENTDECL

Grammar

Rule 0     S' -> declarations
Rule 1     declarations -> declarations declaration
Rule 2     declarations -> declaration
Rule 3     declaration -> < ! ELEMENT TAG content >
Rule 4     content -> child
Rule 5     content -> ( PCDATA options ) *
Rule 6     content -> ( PCDATA ) quantifier
Rule 7     child -> ( childElems ) quantifier
Rule 8     childElems -> childElems , childElem
Rule 9     childElems -> childElems | childElem
Rule 10    childElems -> childElem
Rule 11    childElem -> child
Rule 12    childElem -> leaf
Rule 13    leaf -> TAG quantifier
Rule 14    quantifier -> *
Rule 15    quantifier -> +
Rule 16    quantifier -> ?
Rule 17    quantifier -> empty
Rule 18    options -> options | TAG
Rule 19    options -> | TAG
Rule 20    empty -> <empty>

Terminals, with rules where they appear

!                    : 3
(                    : 5 6 7
)                    : 5 6 7
*                    : 5 14
+                    : 15
,                    : 8
<                    : 3
>                    : 3
?                    : 16
ATTDECL              : 
COMMENT              : 
ELEMENT              : 3
ENTDECL              : 
PCDATA               : 5 6
TAG                  : 3 13 18 19
error                : 
|                    : 9 18 19

Nonterminals, with rules where they appear

child                : 4 11
childElem            : 8 9 10
childElems           : 7 8 9
content              : 3
declaration          : 1 2
declarations         : 1 0
empty                : 17
leaf                 : 12
options              : 5 18
quantifier           : 6 7 13

Parsing method: LALR

state 0

    (0) S' -> . declarations
    (1) declarations -> . declarations declaration
    (2) declarations -> . declaration
    (3) declaration -> . < ! ELEMENT TAG content >

    <               shift and go to state 3

    declarations                   shift and go to state 1
    declaration                    shift and go to state 2

state 1

    (0) S' -> declarations .
    (1) declarations -> declarations . declaration
    (3) declaration -> . < ! ELEMENT TAG content >

    <               shift and go to state 3

    declaration                    shift and go to state 4

state 2

    (2) declarations -> declaration .

    <               reduce using rule 2 (declarations -> declaration .)
    $end            reduce using rule 2 (declarations -> declaration .)


state 3

    (3) declaration -> < . ! ELEMENT TAG content >

    !               shift and go to state 5


state 4

    (1) declarations -> declarations declaration .

    <               reduce using rule 1 (declarations -> declarations declaration .)
    $end            reduce using rule 1 (declarations -> declarations declaration .)


state 5

    (3) declaration -> < ! . ELEMENT TAG content >

    ELEMENT         shift and go to state 6


state 6

    (3) declaration -> < ! ELEMENT . TAG content >

    TAG             shift and go to state 7


state 7

    (3) declaration -> < ! ELEMENT TAG . content >
    (4) content -> . child
    (5) content -> . ( PCDATA options ) *
    (6) content -> . ( PCDATA ) quantifier
    (7) child -> . ( childElems ) quantifier

    (               shift and go to state 10

    content                        shift and go to state 8
    child                          shift and go to state 9

state 8

    (3) declaration -> < ! ELEMENT TAG content . >

    >               shift and go to state 11


state 9

    (4) content -> child .

    >               reduce using rule 4 (content -> child .)


state 10

    (5) content -> ( . PCDATA options ) *
    (6) content -> ( . PCDATA ) quantifier
    (7) child -> ( . childElems ) quantifier
    (8) childElems -> . childElems , childElem
    (9) childElems -> . childElems | childElem
    (10) childElems -> . childElem
    (11) childElem -> . child
    (12) childElem -> . leaf
    (7) child -> . ( childElems ) quantifier
    (13) leaf -> . TAG quantifier

    PCDATA          shift and go to state 13
    (               shift and go to state 12
    TAG             shift and go to state 18

    childElems                     shift and go to state 14
    childElem                      shift and go to state 15
    child                          shift and go to state 16
    leaf                           shift and go to state 17

state 11

    (3) declaration -> < ! ELEMENT TAG content > .

    <               reduce using rule 3 (declaration -> < ! ELEMENT TAG content > .)
    $end            reduce using rule 3 (declaration -> < ! ELEMENT TAG content > .)


state 12

    (7) child -> ( . childElems ) quantifier
    (8) childElems -> . childElems , childElem
    (9) childElems -> . childElems | childElem
    (10) childElems -> . childElem
    (11) childElem -> . child
    (12) childElem -> . leaf
    (7) child -> . ( childElems ) quantifier
    (13) leaf -> . TAG quantifier

    (               shift and go to state 12
    TAG             shift and go to state 18

    childElems                     shift and go to state 14
    childElem                      shift and go to state 15
    child                          shift and go to state 16
    leaf                           shift and go to state 17

state 13

    (5) content -> ( PCDATA . options ) *
    (6) content -> ( PCDATA . ) quantifier
    (18) options -> . options | TAG
    (19) options -> . | TAG

    )               shift and go to state 20
    |               shift and go to state 21

    options                        shift and go to state 19

state 14

    (7) child -> ( childElems . ) quantifier
    (8) childElems -> childElems . , childElem
    (9) childElems -> childElems . | childElem

    )               shift and go to state 22
    ,               shift and go to state 23
    |               shift and go to state 24


state 15

    (10) childElems -> childElem .

    )               reduce using rule 10 (childElems -> childElem .)
    ,               reduce using rule 10 (childElems -> childElem .)
    |               reduce using rule 10 (childElems -> childElem .)


state 16

    (11) childElem -> child .

    )               reduce using rule 11 (childElem -> child .)
    ,               reduce using rule 11 (childElem -> child .)
    |               reduce using rule 11 (childElem -> child .)


state 17

    (12) childElem -> leaf .

    )               reduce using rule 12 (childElem -> leaf .)
    ,               reduce using rule 12 (childElem -> leaf .)
    |               reduce using rule 12 (childElem -> leaf .)


state 18

    (13) leaf -> TAG . quantifier
    (14) quantifier -> . *
    (15) quantifier -> . +
    (16) quantifier -> . ?
    (17) quantifier -> . empty
    (20) empty -> .

    *               shift and go to state 26
    +               shift and go to state 27
    ?               shift and go to state 28
    )               reduce using rule 20 (empty -> .)
    ,               reduce using rule 20 (empty -> .)
    |               reduce using rule 20 (empty -> .)

    quantifier                     shift and go to state 25
    empty                          shift and go to state 29

state 19

    (5) content -> ( PCDATA options . ) *
    (18) options -> options . | TAG

    )               shift and go to state 30
    |               shift and go to state 31


state 20

    (6) content -> ( PCDATA ) . quantifier
    (14) quantifier -> . *
    (15) quantifier -> . +
    (16) quantifier -> . ?
    (17) quantifier -> . empty
    (20) empty -> .

    *               shift and go to state 26
    +               shift and go to state 27
    ?               shift and go to state 28
    >               reduce using rule 20 (empty -> .)

    quantifier                     shift and go to state 32
    empty                          shift and go to state 29

state 21

    (19) options -> | . TAG

    TAG             shift and go to state 33


state 22

    (7) child -> ( childElems ) . quantifier
    (14) quantifier -> . *
    (15) quantifier -> . +
    (16) quantifier -> . ?
    (17) quantifier -> . empty
    (20) empty -> .

    *               shift and go to state 26
    +               shift and go to state 27
    ?               shift and go to state 28
    >               reduce using rule 20 (empty -> .)
    )               reduce using rule 20 (empty -> .)
    ,               reduce using rule 20 (empty -> .)
    |               reduce using rule 20 (empty -> .)

    quantifier                     shift and go to state 34
    empty                          shift and go to state 29

state 23

    (8) childElems -> childElems , . childElem
    (11) childElem -> . child
    (12) childElem -> . leaf
    (7) child -> . ( childElems ) quantifier
    (13) leaf -> . TAG quantifier

    (               shift and go to state 12
    TAG             shift and go to state 18

    childElem                      shift and go to state 35
    child                          shift and go to state 16
    leaf                           shift and go to state 17

state 24

    (9) childElems -> childElems | . childElem
    (11) childElem -> . child
    (12) childElem -> . leaf
    (7) child -> . ( childElems ) quantifier
    (13) leaf -> . TAG quantifier

    (               shift and go to state 12
    TAG             shift and go to state 18

    childElem                      shift and go to state 36
    child                          shift and go to state 16
    leaf                           shift and go to state 17

state 25

    (13) leaf -> TAG quantifier .

    )               reduce using rule 13 (leaf -> TAG quantifier .)
    ,               reduce using rule 13 (leaf -> TAG quantifier .)
    |               reduce using rule 13 (leaf -> TAG quantifier .)


state 26

    (14) quantifier -> * .

    )               reduce using rule 14 (quantifier -> * .)
    ,               reduce using rule 14 (quantifier -> * .)
    |               reduce using rule 14 (quantifier -> * .)
    >               reduce using rule 14 (quantifier -> * .)


state 27

    (15) quantifier -> + .

    )               reduce using rule 15 (quantifier -> + .)
    ,               reduce using rule 15 (quantifier -> + .)
    |               reduce using rule 15 (quantifier -> + .)
    >               reduce using rule 15 (quantifier -> + .)


state 28

    (16) quantifier -> ? .

    )               reduce using rule 16 (quantifier -> ? .)
    ,               reduce using rule 16 (quantifier -> ? .)
    |               reduce using rule 16 (quantifier -> ? .)
    >               reduce using rule 16 (quantifier -> ? .)


state 29

    (17) quantifier -> empty .

    )               reduce using rule 17 (quantifier -> empty .)
    ,               reduce using rule 17 (quantifier -> empty .)
    |               reduce using rule 17 (quantifier -> empty .)
    >               reduce using rule 17 (quantifier -> empty .)


state 30

    (5) content -> ( PCDATA options ) . *

    *               shift and go to state 37


state 31

    (18) options -> options | . TAG

    TAG             shift and go to state 38


state 32

    (6) content -> ( PCDATA ) quantifier .

    >               reduce using rule 6 (content -> ( PCDATA ) quantifier .)


state 33

    (19) options -> | TAG .

    )               reduce using rule 19 (options -> | TAG .)
    |               reduce using rule 19 (options -> | TAG .)


state 34

    (7) child -> ( childElems ) quantifier .

    >               reduce using rule 7 (child -> ( childElems ) quantifier .)
    )               reduce using rule 7 (child -> ( childElems ) quantifier .)
    ,               reduce using rule 7 (child -> ( childElems ) quantifier .)
    |               reduce using rule 7 (child -> ( childElems ) quantifier .)


state 35

    (8) childElems -> childElems , childElem .

    )               reduce using rule 8 (childElems -> childElems , childElem .)
    ,               reduce using rule 8 (childElems -> childElems , childElem .)
    |               reduce using rule 8 (childElems -> childElems , childElem .)


state 36

    (9) childElems -> childElems | childElem .

    )               reduce using rule 9 (childElems -> childElems | childElem .)
    ,               reduce using rule 9 (childElems -> childElems | childElem .)
    |               reduce using rule 9 (childElems -> childElems | childElem .)


state 37

    (5) content -> ( PCDATA options ) * .

    >               reduce using rule 5 (content -> ( PCDATA options ) * .)


state 38

    (18) options -> options | TAG .

    )               reduce using rule 18 (options -> options | TAG .)
    |               reduce using rule 18 (options -> options | TAG .)

