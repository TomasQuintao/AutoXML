Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ATTDECL
    COMMENT
    ENTDECL

Grammar

Rule 0     S' -> declarations
Rule 1     declarations -> declarations declaration
Rule 2     declarations -> declaration
Rule 3     declaration -> < ! ELEMENT TAG content >
Rule 4     content -> child
Rule 5     content -> ( PCDATA options ) *
Rule 6     content -> ( PCDATA )
Rule 7     content -> EMPTY_ELEM
Rule 8     content -> ANY
Rule 9     child -> ( childElems ) quantifier
Rule 10    childElems -> childElems , childElem
Rule 11    childElems -> childElems | childElem
Rule 12    childElems -> childElem
Rule 13    childElem -> child
Rule 14    childElem -> leaf
Rule 15    leaf -> TAG quantifier
Rule 16    quantifier -> *
Rule 17    quantifier -> +
Rule 18    quantifier -> ?
Rule 19    quantifier -> empty
Rule 20    options -> options | TAG
Rule 21    options -> | TAG
Rule 22    empty -> <empty>

Terminals, with rules where they appear

!                    : 3
(                    : 5 6 9
)                    : 5 6 9
*                    : 5 16
+                    : 17
,                    : 10
<                    : 3
>                    : 3
?                    : 18
ANY                  : 8
ATTDECL              : 
COMMENT              : 
ELEMENT              : 3
EMPTY_ELEM           : 7
ENTDECL              : 
PCDATA               : 5 6
TAG                  : 3 15 20 21
error                : 
|                    : 11 20 21

Nonterminals, with rules where they appear

child                : 4 13
childElem            : 10 11 12
childElems           : 9 10 11
content              : 3
declaration          : 1 2
declarations         : 1 0
empty                : 19
leaf                 : 14
options              : 5 20
quantifier           : 9 15

Parsing method: LALR

state 0

    (0) S' -> . declarations
    (1) declarations -> . declarations declaration
    (2) declarations -> . declaration
    (3) declaration -> . < ! ELEMENT TAG content >

    <               shift and go to state 3

    declarations                   shift and go to state 1
    declaration                    shift and go to state 2

state 1

    (0) S' -> declarations .
    (1) declarations -> declarations . declaration
    (3) declaration -> . < ! ELEMENT TAG content >

    <               shift and go to state 3

    declaration                    shift and go to state 4

state 2

    (2) declarations -> declaration .

    <               reduce using rule 2 (declarations -> declaration .)
    $end            reduce using rule 2 (declarations -> declaration .)


state 3

    (3) declaration -> < . ! ELEMENT TAG content >

    !               shift and go to state 5


state 4

    (1) declarations -> declarations declaration .

    <               reduce using rule 1 (declarations -> declarations declaration .)
    $end            reduce using rule 1 (declarations -> declarations declaration .)


state 5

    (3) declaration -> < ! . ELEMENT TAG content >

    ELEMENT         shift and go to state 6


state 6

    (3) declaration -> < ! ELEMENT . TAG content >

    TAG             shift and go to state 7


state 7

    (3) declaration -> < ! ELEMENT TAG . content >
    (4) content -> . child
    (5) content -> . ( PCDATA options ) *
    (6) content -> . ( PCDATA )
    (7) content -> . EMPTY_ELEM
    (8) content -> . ANY
    (9) child -> . ( childElems ) quantifier

    (               shift and go to state 10
    EMPTY_ELEM      shift and go to state 11
    ANY             shift and go to state 12

    content                        shift and go to state 8
    child                          shift and go to state 9

state 8

    (3) declaration -> < ! ELEMENT TAG content . >

    >               shift and go to state 13


state 9

    (4) content -> child .

    >               reduce using rule 4 (content -> child .)


state 10

    (5) content -> ( . PCDATA options ) *
    (6) content -> ( . PCDATA )
    (9) child -> ( . childElems ) quantifier
    (10) childElems -> . childElems , childElem
    (11) childElems -> . childElems | childElem
    (12) childElems -> . childElem
    (13) childElem -> . child
    (14) childElem -> . leaf
    (9) child -> . ( childElems ) quantifier
    (15) leaf -> . TAG quantifier

    PCDATA          shift and go to state 15
    (               shift and go to state 14
    TAG             shift and go to state 20

    childElems                     shift and go to state 16
    childElem                      shift and go to state 17
    child                          shift and go to state 18
    leaf                           shift and go to state 19

state 11

    (7) content -> EMPTY_ELEM .

    >               reduce using rule 7 (content -> EMPTY_ELEM .)


state 12

    (8) content -> ANY .

    >               reduce using rule 8 (content -> ANY .)


state 13

    (3) declaration -> < ! ELEMENT TAG content > .

    <               reduce using rule 3 (declaration -> < ! ELEMENT TAG content > .)
    $end            reduce using rule 3 (declaration -> < ! ELEMENT TAG content > .)


state 14

    (9) child -> ( . childElems ) quantifier
    (10) childElems -> . childElems , childElem
    (11) childElems -> . childElems | childElem
    (12) childElems -> . childElem
    (13) childElem -> . child
    (14) childElem -> . leaf
    (9) child -> . ( childElems ) quantifier
    (15) leaf -> . TAG quantifier

    (               shift and go to state 14
    TAG             shift and go to state 20

    childElems                     shift and go to state 16
    childElem                      shift and go to state 17
    child                          shift and go to state 18
    leaf                           shift and go to state 19

state 15

    (5) content -> ( PCDATA . options ) *
    (6) content -> ( PCDATA . )
    (20) options -> . options | TAG
    (21) options -> . | TAG

    )               shift and go to state 22
    |               shift and go to state 23

    options                        shift and go to state 21

state 16

    (9) child -> ( childElems . ) quantifier
    (10) childElems -> childElems . , childElem
    (11) childElems -> childElems . | childElem

    )               shift and go to state 24
    ,               shift and go to state 25
    |               shift and go to state 26


state 17

    (12) childElems -> childElem .

    )               reduce using rule 12 (childElems -> childElem .)
    ,               reduce using rule 12 (childElems -> childElem .)
    |               reduce using rule 12 (childElems -> childElem .)


state 18

    (13) childElem -> child .

    )               reduce using rule 13 (childElem -> child .)
    ,               reduce using rule 13 (childElem -> child .)
    |               reduce using rule 13 (childElem -> child .)


state 19

    (14) childElem -> leaf .

    )               reduce using rule 14 (childElem -> leaf .)
    ,               reduce using rule 14 (childElem -> leaf .)
    |               reduce using rule 14 (childElem -> leaf .)


state 20

    (15) leaf -> TAG . quantifier
    (16) quantifier -> . *
    (17) quantifier -> . +
    (18) quantifier -> . ?
    (19) quantifier -> . empty
    (22) empty -> .

    *               shift and go to state 28
    +               shift and go to state 29
    ?               shift and go to state 30
    )               reduce using rule 22 (empty -> .)
    ,               reduce using rule 22 (empty -> .)
    |               reduce using rule 22 (empty -> .)

    quantifier                     shift and go to state 27
    empty                          shift and go to state 31

state 21

    (5) content -> ( PCDATA options . ) *
    (20) options -> options . | TAG

    )               shift and go to state 32
    |               shift and go to state 33


state 22

    (6) content -> ( PCDATA ) .

    >               reduce using rule 6 (content -> ( PCDATA ) .)


state 23

    (21) options -> | . TAG

    TAG             shift and go to state 34


state 24

    (9) child -> ( childElems ) . quantifier
    (16) quantifier -> . *
    (17) quantifier -> . +
    (18) quantifier -> . ?
    (19) quantifier -> . empty
    (22) empty -> .

    *               shift and go to state 28
    +               shift and go to state 29
    ?               shift and go to state 30
    >               reduce using rule 22 (empty -> .)
    )               reduce using rule 22 (empty -> .)
    ,               reduce using rule 22 (empty -> .)
    |               reduce using rule 22 (empty -> .)

    quantifier                     shift and go to state 35
    empty                          shift and go to state 31

state 25

    (10) childElems -> childElems , . childElem
    (13) childElem -> . child
    (14) childElem -> . leaf
    (9) child -> . ( childElems ) quantifier
    (15) leaf -> . TAG quantifier

    (               shift and go to state 14
    TAG             shift and go to state 20

    childElem                      shift and go to state 36
    child                          shift and go to state 18
    leaf                           shift and go to state 19

state 26

    (11) childElems -> childElems | . childElem
    (13) childElem -> . child
    (14) childElem -> . leaf
    (9) child -> . ( childElems ) quantifier
    (15) leaf -> . TAG quantifier

    (               shift and go to state 14
    TAG             shift and go to state 20

    childElem                      shift and go to state 37
    child                          shift and go to state 18
    leaf                           shift and go to state 19

state 27

    (15) leaf -> TAG quantifier .

    )               reduce using rule 15 (leaf -> TAG quantifier .)
    ,               reduce using rule 15 (leaf -> TAG quantifier .)
    |               reduce using rule 15 (leaf -> TAG quantifier .)


state 28

    (16) quantifier -> * .

    )               reduce using rule 16 (quantifier -> * .)
    ,               reduce using rule 16 (quantifier -> * .)
    |               reduce using rule 16 (quantifier -> * .)
    >               reduce using rule 16 (quantifier -> * .)


state 29

    (17) quantifier -> + .

    )               reduce using rule 17 (quantifier -> + .)
    ,               reduce using rule 17 (quantifier -> + .)
    |               reduce using rule 17 (quantifier -> + .)
    >               reduce using rule 17 (quantifier -> + .)


state 30

    (18) quantifier -> ? .

    )               reduce using rule 18 (quantifier -> ? .)
    ,               reduce using rule 18 (quantifier -> ? .)
    |               reduce using rule 18 (quantifier -> ? .)
    >               reduce using rule 18 (quantifier -> ? .)


state 31

    (19) quantifier -> empty .

    )               reduce using rule 19 (quantifier -> empty .)
    ,               reduce using rule 19 (quantifier -> empty .)
    |               reduce using rule 19 (quantifier -> empty .)
    >               reduce using rule 19 (quantifier -> empty .)


state 32

    (5) content -> ( PCDATA options ) . *

    *               shift and go to state 38


state 33

    (20) options -> options | . TAG

    TAG             shift and go to state 39


state 34

    (21) options -> | TAG .

    )               reduce using rule 21 (options -> | TAG .)
    |               reduce using rule 21 (options -> | TAG .)


state 35

    (9) child -> ( childElems ) quantifier .

    >               reduce using rule 9 (child -> ( childElems ) quantifier .)
    )               reduce using rule 9 (child -> ( childElems ) quantifier .)
    ,               reduce using rule 9 (child -> ( childElems ) quantifier .)
    |               reduce using rule 9 (child -> ( childElems ) quantifier .)


state 36

    (10) childElems -> childElems , childElem .

    )               reduce using rule 10 (childElems -> childElems , childElem .)
    ,               reduce using rule 10 (childElems -> childElems , childElem .)
    |               reduce using rule 10 (childElems -> childElems , childElem .)


state 37

    (11) childElems -> childElems | childElem .

    )               reduce using rule 11 (childElems -> childElems | childElem .)
    ,               reduce using rule 11 (childElems -> childElems | childElem .)
    |               reduce using rule 11 (childElems -> childElems | childElem .)


state 38

    (5) content -> ( PCDATA options ) * .

    >               reduce using rule 5 (content -> ( PCDATA options ) * .)


state 39

    (20) options -> options | TAG .

    )               reduce using rule 20 (options -> options | TAG .)
    |               reduce using rule 20 (options -> options | TAG .)

